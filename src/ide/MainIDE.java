/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ide;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.util.Stack;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JViewport;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyledDocument;

/**
 *
 * @author prajjwal-ubuntu
 */
public class MainIDE extends javax.swing.JFrame {
        
    public static final JDialog dialog = new JDialog();
    public static JFrame jframe=new JFrame("File save"); 
    private javax.swing.JFileChooser OpenDialog;
    /**
     * Creates new form MainIDE
     */
    public MainIDE() {
        initComponents();
        prev = new FixedStack<>(1000);
        prev.push("");
        setTitle("I-Ray");
        dialog.setAlwaysOnTop(true);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editor = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        input = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        inputArea = new javax.swing.JTextPane();
        output = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        languageCombo = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        editor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editorMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTextPane1);

        editor.addTab("untitled", jScrollPane1);

        jScrollPane2.setViewportView(jTextPane2);

        editor.addTab("+", jScrollPane2);

        jScrollPane3.setViewportView(inputArea);

        input.addTab("input", jScrollPane3);

        jScrollPane4.setViewportView(outputArea);

        output.addTab("output", jScrollPane4);

        jButton1.setText("New");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Open");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Save As");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton4.setText("Compile");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Run");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        languageCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "C++", "C", "Java", "Python" }));
        languageCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton6)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jButton7.setText("Replace");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("new");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("save");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("save as");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("exit");
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("cut");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("copy");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("paste");
        jMenu2.add(jMenuItem8);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setText("replace");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("tools");

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("compile");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem10.setText("run");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editor, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(output, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(editor, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(91, 91, 91))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void languageComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_languageComboActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            // TODO add your handling code here:
            this.compile();
        } catch (IOException ex) {
            Logger.getLogger(MainIDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(MainIDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(MainIDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            // TODO add your handling code here:
            this.runFile();
        } catch (IOException ex) {
            Logger.getLogger(MainIDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(MainIDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(MainIDE.class.getName()).log(Level.SEVERE, null, ex);
        }
                
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            this.saveFile();
        } catch (IOException ex) {
            Logger.getLogger(MainIDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.openFile();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        this.saveFileAs();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        this.callReplaceDialog();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.newFile();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void editorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editorMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount()==1){
            int index1=this.editor.getTabCount()-1;
            int index=this.editor.getSelectedIndex();
            if(index==index1){
                this.newFile();
                
            }
            
        }
        else if(evt.getClickCount()==2){
            if(JOptionPane.showConfirmDialog(dialog,"Do you want to close this tab any unsaved content will be lost") == JOptionPane.OK_OPTION){
                int index=this.editor.getSelectedIndex();
                this.editor.remove(index);
                
                
            }
        }
    }//GEN-LAST:event_editorMouseClicked

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        jButton3.doClick();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        jButton1.doClick();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        jButton6.doClick();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        jButton2.doClick();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        jButton4.doClick();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        jButton5.doClick();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        jButton7.doClick();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItem6ActionPerformed

        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainIDE().setVisible(true);
            }
        });
    }
    
    private void callReplaceDialog() {
        new FindReplace(this).setVisible(true);
    }

    public void replace(boolean all,boolean caseSensitive) {
        JScrollPane scroll=(JScrollPane)this.editor.getSelectedComponent();
        int index=editor.getSelectedIndex();
        JViewport port=(JViewport)scroll.getComponent(index);
        JTextPane text=(JTextPane)port.getComponent(index);
        String str=text.getText();
        
        prev.push(str);
        String data=text.getText();
        if  (!caseSensitive) {
            data=data.toLowerCase();
            findText=findText.toLowerCase();
        }
        int len=data.length();
        for (int i=0;i<len;i++) {
            char c=data.charAt(i);
            if (c==findText.charAt(0)) {
                int start=i;
                boolean flag=true;
                for (int j=0;j<findText.length();j++,i++) {
                    if (i>=len||data.charAt(i)!=findText.charAt(j)) {
                        flag=false;
                        break;
                    }
                }
                if (flag) {
                    int end=i;
                    text.select(start,end);
                    text.replaceSelection(replaceText);
                    data=text.getText();
                    len=data.length();
                    i=start+replaceText.length()-1;
                    if (!all)
                    break;
                }
            }
        }
    }
    
    // create new file
    private void newFile(){
        JScrollPane scrollPane =new JScrollPane();
        scrollPane.setViewportView(new JTextPane());
        this.editor.add(scrollPane,"untitled", 0);
        this.editor.setSelectedIndex(0);
    }
    
    private void openFile(){
        JFileChooser OpenDialog= new JFileChooser();
        
        OpenDialog.setDialogTitle("Open File");
        OpenDialog.setAcceptAllFileFilterUsed(false);
        javax.swing.filechooser.FileNameExtensionFilter filter=new javax.swing.filechooser.FileNameExtensionFilter(".c, .cpp, .java, .py","c","cpp","java","py");
        OpenDialog.setFileFilter(filter);
        OpenDialog.showOpenDialog(null);
        File file=OpenDialog.getSelectedFile();
        if(file!=null){
        try{    
                java.io.FileReader reader = new java.io.FileReader(file);
                char inputBuffer[]=new char[(int)file.length()];
                int red=reader.read(inputBuffer);
                StringBuffer str=new StringBuffer("");
                str.append(inputBuffer);
                String Str=str.toString();
                String FilePath=file.getAbsolutePath();
                // Edit here ..............
                OpenFile(file.getName(),Str,FilePath,true);
                

                return;
            }
            catch (FileNotFoundException e){
                JOptionPane.showMessageDialog(null,"File not found");

                
                return;
            }
            catch (IOException e){
                JOptionPane.showMessageDialog(null,"Input Output Exception occurred");

                
                return;
            }
        }
        else{
            
            return;
        }
    }
    
    private void OpenFile(String filename,String filecontent,String filepath,boolean flag){
        jTextPane1.setText(filecontent);
                        if(cfilter.accept(new File(filepath))){
                            languageCombo.setSelectedItem("C");
                           
                        }
                        if(cppfilter.accept(new File(filepath))){
                            languageCombo.setSelectedItem("C++");
                            
                        }
                        if(javafilter.accept(new File(filepath))){
                            languageCombo.setSelectedItem("Java");
                            
                        }
    }
    
    private int saveFile() throws IOException{
        
        JScrollPane scroll=(JScrollPane)editor.getSelectedComponent();
        int index=editor.getSelectedIndex();
        JViewport port=(JViewport)scroll.getComponent(index);
         JTextPane text=(JTextPane)port.getComponent(index);
//         if(save==0){
//             this.saveFileAs();
//         }
//         else{
//                String fileName=filePath;
//                
//                java.io.File file=new java.io.File(fileName);
//                
//                
//                java.io.FileWriter writer=new java.io.FileWriter(file);
//                String str=text.getText();
//                writer.write(str);
//                writer.flush();
//         }
            this.saveFileAs();
               return 1; 
         
    }
    
    private int saveFileAs(){
        JFileChooser SaveDialog= new JFileChooser();
        
        SaveDialog.setDialogTitle("Save File");
        SaveDialog.setAcceptAllFileFilterUsed(false);
        javax.swing.filechooser.FileNameExtensionFilter filter1=new javax.swing.filechooser.FileNameExtensionFilter(".c, .cpp, .java, .py","c","cpp","java","py");
        SaveDialog.setFileFilter(filter1);
        SaveDialog.showSaveDialog(null);
        File file=SaveDialog.getSelectedFile();
        javax.swing.filechooser.FileFilter filter=SaveDialog.getFileFilter();
        if(file!=null){
            try{
                if(filter.accept(file)){
                    if(file.createNewFile()){
                        java.io.FileWriter writer=new java.io.FileWriter(file);
                        JScrollPane scroll=(JScrollPane)this.editor.getSelectedComponent();
                        int index=editor.getSelectedIndex();
                        JViewport port=(JViewport)scroll.getComponent(index);
                        JTextPane text=(JTextPane)port.getComponent(index);
                        String str=text.getText();
                        writer.write(str);
                        writer.flush();
                        filePath=file.getAbsolutePath();
                        save=1;
                        
                    }
                    else{
                        int result=JOptionPane.showConfirmDialog(null,"File aready exists do you want to overwrite it?");
                        if(result==0){
                            java.io.FileWriter writer =new java.io.FileWriter(file);
                            JScrollPane scroll=(JScrollPane)this.editor.getSelectedComponent();
                            int index=editor.getSelectedIndex();
                            JViewport port=(JViewport)scroll.getComponent(index);
                            JTextPane text=(JTextPane)port.getComponent(index);
                            String str=text.getText();
                            writer.write(str);
                            writer.flush();
                            filePath=file.getAbsolutePath();
                            save=1;
                            
                        }
                    }
                }
                else{
                    javax.swing.JOptionPane.showMessageDialog(null,"Invalid file format, please make sure your file is of .c, .cpp and .java format only.");
                    
                }
            }
            catch(IOException e){
                JOptionPane.showMessageDialog(null,"Input Output Exception Occurred");
                
            }
        }
        return 1;
    }
    
    
    
    
     private int compile() throws IOException, BadLocationException, InterruptedException{
         JScrollPane scroll=(JScrollPane)editor.getSelectedComponent();
         int index=editor.getSelectedIndex();
         JViewport port=(JViewport)scroll.getComponent(index);
         JTextPane text=(JTextPane)port.getComponent(index);
         java.io.File file = null;
         
             String str1 = (String) languageCombo.getSelectedItem();
             if(str1.compareTo("Java") == 0)
                file=new java.io.File("./autoGenerated/autofile.java");
            if(str1.compareTo("C") == 0)
                file=new java.io.File("./autoGenerated/autofile.c");
            if(str1.compareTo("C++") == 0)
                file=new java.io.File("./autoGenerated/autofile.cpp");
            if(str1.compareTo("Python") == 0)
                file=new java.io.File("./autoGenerated/autofile.py");
            
            file.createNewFile();
             
         
           
            
                
                java.io.FileWriter writer=new java.io.FileWriter(file,false);
                String str=text.getText();
                writer.write(str);
                writer.flush();
                filePath=file.getAbsolutePath();
                Runtime runtime=Runtime.getRuntime();
                String command="";
                if(cfilter.accept(file))
                        command="gcc"+" "+file.getAbsolutePath();
                    if(cppfilter.accept(file))
                        command="g++"+" " +file.getAbsolutePath();
                    if(javafilter.accept(file))
                        command="javac"+" "+file.getAbsolutePath();
                    if(!pythonfilter.accept(file)){
                Process proc=runtime.exec(command,null,file.getParentFile());
                    proc.waitFor();
                    Scanner scan=new Scanner(proc.getErrorStream());
                    StyledDocument doc = outputArea.getStyledDocument();
                    AttributeSet failure = null;
                    if(scan.hasNext()){
                        outputArea.setText("");
                        doc.insertString(doc.getLength(),"Compilation Error \n",failure);
                        while(scan.hasNext())
                            doc.insertString(doc.getLength()," "+scan.nextLine()+"\n",null);
                        return 0;
                    }
                    else{
                        outputArea.setText("");
                    AttributeSet success = null;
                        doc.insertString(doc.getLength(),"Code compiled successfully!!!",success);
                        return 1;
                    }
                    }
        return 1;
     }
     
     
     private void runFile() throws IOException, BadLocationException, InterruptedException{
        if(this.compile()==1){
            int index=editor.getSelectedIndex();
            java.io.File file=new java.io.File(filePath);
            try{
                String command="";
                if(cfilter.accept(file))
                    command="./a.out";
                if(cppfilter.accept(file))
                    command="./a.out";
                if(javafilter.accept(file)){
                    String name=file.getName().substring(0,file.getName().length()-5);
                    command="java "+name;
                }
                if(pythonfilter.accept(file)){
                    String name=file.getName().substring(0,file.getName().length());
                    command="python3 "+name;
                }
                Runtime runtime=Runtime.getRuntime();
                Process proc=runtime.exec(command,null,file.getParentFile());
                java.io.BufferedWriter writer=new java.io.BufferedWriter(new java.io.OutputStreamWriter(proc.getOutputStream()));
                String ss=inputArea.getText();
                if(ss.compareTo("")!=0){
                writer.write(ss);
                writer.flush();
                writer.write("\n");
                writer.flush();
                }
                java.util.GregorianCalendar date1 = new java.util.GregorianCalendar();
                long time1=date1.getTimeInMillis();
                StyledDocument doc = outputArea.getStyledDocument();
                if(proc.waitFor(2,TimeUnit.SECONDS)){
                    java.util.GregorianCalendar date2 = new java.util.GregorianCalendar();
                    long time2=date2.getTimeInMillis();
                    Scanner error=new Scanner(proc.getErrorStream());
                    if(proc.getErrorStream().available()!=0)
                        if(error.hasNext()){
                            outputArea.setText("");
                        AttributeSet failure = null;
                            doc.insertString(doc.getLength(),"Error Occurred\n",failure);
                            while(error.hasNext())
                                doc.insertString(doc.getLength()," "+error.nextLine()+"\n",null);
                            return;
                        }
                    Scanner output=new Scanner(proc.getInputStream());
                    outputArea.setText("");
                    AttributeSet success = null;
                    doc.insertString(doc.getLength(),"Run Successful (total time: "+(float)(time2-time1)/1000+" seconds)\n",success);
                    if(proc.getInputStream().available()!=0)
                        while(output.hasNext())
                            doc.insertString(doc.getLength()," "+output.nextLine()+"\n",null);
                    return;
                }
                else{
                    //JOptionPane.showMessageDialog(dialog,"Time limit exceeded");
                    java.util.GregorianCalendar date2 = new java.util.GregorianCalendar();
                    long time2=date2.getTimeInMillis();
                    outputArea.setText("");
                    AttributeSet failure = null;
                    doc.insertString(doc.getLength(),"Build Stopped (total time: "+(float)(time2-time1)/1000+" seconds)\n",failure);
                    Scanner output=new Scanner(proc.getInputStream());
                    //output.hasNext() a blocking call do something about it
                    if(proc.getInputStream().available()!=0)
                        while(output.hasNext())
                            doc.insertString(doc.getLength()," "+output.nextLine()+"\n",null);
                    return;
                }
            }
            catch(IOException e){
                JOptionPane.showMessageDialog(dialog,"Input Output Exception Occurred");
                return;
            }
            catch(InterruptedException e){
                JOptionPane.showMessageDialog(dialog,"Process Interrupted");
                return;
            } catch (BadLocationException ex) {
                System.out.println("Internal Error In Output Area !!!!!!!!");
                return;
            }
        }
        else{
            return;
        }
    }
     
     
    
    private String  filePath;
    int save=0;
    private FixedStack<String> prev;
    public String findText;
    public String replaceText;
    private static javax.swing.filechooser.FileFilter cfilter =new javax.swing.filechooser.FileNameExtensionFilter(null,"c");
    private static javax.swing.filechooser.FileFilter cppfilter =new javax.swing.filechooser.FileNameExtensionFilter(null,"cpp");
    private static javax.swing.filechooser.FileFilter javafilter =new javax.swing.filechooser.FileNameExtensionFilter(null,"java");
    private static javax.swing.filechooser.FileFilter pythonfilter =new javax.swing.filechooser.FileNameExtensionFilter(null,"py");

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane editor;
    private javax.swing.JTabbedPane input;
    private javax.swing.JTextPane inputArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JComboBox<String> languageCombo;
    private javax.swing.JTabbedPane output;
    private javax.swing.JTextPane outputArea;
    // End of variables declaration//GEN-END:variables
}


class FixedStack<T> extends Stack<T> {
    private final int maxSize;
    public FixedStack(int size) {
        super();
        this.maxSize=size;
    }
    @Override
    public T push(T object) {
        while (this.size()>=maxSize) {
            this.remove(0);
        }
        return super.push(object);
    }
}